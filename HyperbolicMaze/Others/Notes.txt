String operation rules:
1. Add "D", "R", "U", "L" to the current string (Down, Right, Up, Left).
2. Any last two letters being opposites ("DU", "UD", "LR", "RL) are removed.
3. Whenever the third last letter and the last letter of an element are opposites,
the newly added letter is removed and the last two are flipped.
4. If the last letter and the fourth last letter are opposites, the entry stays unless
the same string with a specific quadruple at the end is included in the list according to the following pairs:

LDDR <-> DLLU
RDDL <-> DRRU
LUUR <-> ULLD
RUUL <-> URRD

If the statement holds true for the key string, it is excluded from the map.

Some examples:

"": ["D", "R", "U", "L"],
"D": ["DD", "DR", "", "DL"], 
"R": ["RD", "RR", "RU", ""], 
"U": ["", "UR", "UU", "UL"], 
"L": ["LD", "", "LU", "LL"],
"DR": ["DRD", "DRR", "RD", "D"],
"DL": ["DLD", "D", "LD", "DLL"],
"LD": ["LDD", "DL", "L", "LDL"], 
"LDDL": ["LDDLD", "LDLD", "LDD", "LDDLL"], 
"LDLD": ["LDLDD", "LDL", "LDDL", "LDLDL"], 
"LLL": ["LLLD", "LL", "LLLU", "LLLL"],
"LLLU": ["LLL", "LLUL", "LLLUU", "LLLLUL"],  


Maze-generating pseudo:
1. Add all neighbors and generate walls for the current tile and one wall per neighbor tile. 
2. Repeat for every visible tile.

Wall probability:
(numWalls-existingWalls) / numZeros


Turning list:
f(0,0) = 0
f(0,1) = 1
f(0,2) = 2
f(0,3) = 3
f(1,0) = 3
f(1,1) = 0
f(1,2) = 1
f(1,3) = 2
f(2,0) = 2
f(2,1) = 3
f(2,2) = 0
f(2,3) = 1
f(3,0) = 1
f(3,1) = 2
f(3,2) = 3
f(3,3) = 0
f(j,i) = (j-i) % 4

Shifts:
g(0) = (0,1)
g(1) = (1,0)
g(2) = (0,-1)
g(3) = (-1,0)
g(k) =

Example of index_to():
direction = "RIGHT"
last_direction = "UP"
index_to_last = 2
goal = 3
Solution = "The amount of clockwise steps from the opposite of last_direction to direction should be added to index_to_last."
index_to_next = (((direction - local_direction_to_previous) % 4) + index_to_last) % 4

Oneliner for local border index:
[xy,

Wall corner check with all other variables known:
Inner confirmed: dim = x/0 -> local_border = 0,   dim = y/1 -> local_border = 3
Outer confirmed: dim = x/0 -> local_border = 2,   dim = y/1 -> local_border = 1
Rotation increase: y_top-under, x_bottom-under, y_bottom-over, x_top-over
Rotation decrease: y_top-over, x_bottom-over, y_bottom-under, x_top-under

How to find the right corner:
Inner options: [[1-w, w], [1-w, 1-w], [w, 1-w], [w, w]]
Outer options: [[[w, 0], [1-w, 0]], [[1, w], [1, 1-w]], [[1-w, 1], [w, 1]], [[0, 1-w], [0, w]]]

1st index: i + previous, where previous is the local index of the direction we came from (opposite of direction stepped).
2nd: 0 before recursion, 1 after. Special case: 1 before for loop, 0 after.

Which angles are correct: (-180, 180]
a > c > b > a-180: 1
Assuming the point c is always in [a, b] or [b, a], the only error occurs when phi_a > 0, phi_b < 0, phi_c < 0.

Left corner order:
[limit, inner, outer]: 1
[limit, outer, inner]: 0
[inner, limit, outer]: 1
[inner, outer, limit]: 0
[outer, limit, inner]: 0
[outer, inner, limit]: 0


Facing direction:
45-135: 2
135-225: 3
225-315: 0
315-45: 1


Twisting direction:
ULD -> LU: -1
RUL -> UR: -1
DRU -> RD: -1
LDR -> DL: -1
LUR -> UL: 1
URD -> RU: 1
RDL -> DR: 1
DLU -> LD: 1


Circle turns:
dot     turn    translation
+       right   -
+       left    +
-       right   +
-       left    -